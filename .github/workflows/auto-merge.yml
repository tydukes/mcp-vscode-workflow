name: Auto-merge Safe Changes

on:
  pull_request:
    types: [opened, synchronize]
    branches: [ main, develop ]

permissions:
  pull-requests: write
  contents: write
  actions: read
  checks: read

jobs:
  check-auto-mergeable:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]' || contains(github.event.pull_request.title, '[auto-merge]')

    steps:
      - name: Debug PR information
        run: |
          echo "=== PR DEBUG INFO ==="
          echo "PR Title: ${{ github.event.pull_request.title }}"
          echo "PR Author: ${{ github.actor }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Branch: ${{ github.event.pull_request.head.ref }}"
          echo "Target Branch: ${{ github.event.pull_request.base.ref }}"
          echo "Contains [auto-merge]: ${{ contains(github.event.pull_request.title, '[auto-merge]') }}"
          echo "Is Dependabot: ${{ github.actor == 'dependabot[bot]' }}"
          echo "Event type: ${{ github.event.action }}"
          echo "===================="

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Analyze changes
        id: analyze
        run: |
          echo "Analyzing changes for auto-merge eligibility..."

          # Get list of changed files
          changed_files=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$changed_files"

          # Define safe change patterns
          safe_patterns=(
            "docs/.*\.md$"
            "README\.md$"
            "\.gitignore$"
            "\.pre-commit-config\.yaml$"
            "pyproject\.toml$"
            "requirements.*\.txt$"
            "Makefile$"
            "\.github/workflows/.*\.yml$"
            "tests/.*\.py$"
            "scripts/debug-.*\.sh$"
            "scripts/check-.*\.sh$"
            "\.vscode/settings\.json$"
            "LICENSE$"
            "\.yamllint$"
            "\.flake8$"
            "setup\.cfg$"
            "tox\.ini$"
            "\.coveragerc$"
            "codecov\.yml$"
            "\.editorconfig$"
            "\.gitattributes$"
          )

          # Define unsafe patterns (critical files that always need review)
          unsafe_patterns=(
            "scripts/bootstrap\.sh$"
            "scripts/install-mcp-npx\.sh$"
            "\.mcp/roles\.json$"
            "\.vscode/profiles/.*\.json$"
          )

          auto_mergeable=true

          while IFS= read -r file; do
            if [ -n "$file" ]; then
              echo "Checking file: $file"

              # Check if file matches unsafe patterns
              for pattern in "${unsafe_patterns[@]}"; do
                if echo "$file" | grep -qE "$pattern"; then
                  echo "❌ File $file matches unsafe pattern: $pattern"
                  auto_mergeable=false
                  break
                fi
              done

              # If not unsafe, check if it matches safe patterns
              if [ "$auto_mergeable" = "true" ]; then
                file_safe=false
                for pattern in "${safe_patterns[@]}"; do
                  if echo "$file" | grep -qE "$pattern"; then
                    echo "✅ File $file matches safe pattern: $pattern"
                    file_safe=true
                    break
                  fi
                done

                if [ "$file_safe" = "false" ]; then
                  echo "❌ File $file does not match any safe patterns"
                  auto_mergeable=false
                fi
              fi
            fi
          done <<< "$changed_files"

          echo "auto_mergeable=$auto_mergeable" >> $GITHUB_OUTPUT

          if [ "$auto_mergeable" = "true" ]; then
            echo "✅ All changes are safe for auto-merge"
          else
            echo "❌ Some changes require manual review"
          fi

      - name: Check change size
        id: size-check
        if: steps.analyze.outputs.auto_mergeable == 'true'
        run: |
          # Check if changes are small enough for auto-merge
          changed_lines=$(git diff --shortstat origin/main...HEAD | grep -oE '[0-9]+ (insertion|deletion)' | awk '{sum += $1} END {print sum}')
          changed_files=$(git diff --name-only origin/main...HEAD | wc -l)

          max_auto_merge_files=10
          max_auto_merge_lines=200

          echo "Changed files: $changed_files (limit: $max_auto_merge_files)"
          echo "Changed lines: $changed_lines (limit: $max_auto_merge_lines)"

          if [ "$changed_files" -le "$max_auto_merge_files" ] && [ "$changed_lines" -le "$max_auto_merge_lines" ]; then
            echo "size_ok=true" >> $GITHUB_OUTPUT
            echo "✅ Change size is acceptable for auto-merge"
          else
            echo "size_ok=false" >> $GITHUB_OUTPUT
            echo "❌ Changes too large for auto-merge"
          fi

      - name: Enable auto-merge
        if: steps.analyze.outputs.auto_mergeable == 'true' && steps.size-check.outputs.size_ok == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.payload.pull_request;

            try {
              // Approve the PR first
              await github.rest.pulls.createReview({
                owner,
                repo,
                pull_number: number,
                event: 'APPROVE',
                body: '✅ Auto-approved: Changes are safe and within auto-merge criteria'
              });

              console.log('✅ PR approved for auto-merge');

              // Enable auto-merge using GitHub's auto-merge feature
              await github.rest.pulls.enableAutoMerge({
                owner,
                repo,
                pull_number: number,
                merge_method: 'squash'
              });

              console.log('✅ Auto-merge enabled successfully');

              // Add auto-merge label
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: ['auto-merge', 'safe-changes']
              });

            } catch (error) {
              console.log('Error enabling auto-merge:', error.message);
              console.log('Error details:', error);

              // If enableAutoMerge fails, the PR is still approved
              console.log('PR is approved but auto-merge could not be enabled');
            }

  dependabot-auto-merge:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'

    steps:
      - name: Enable auto-merge for dependabot
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.payload.pull_request;

            // Get PR details
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });

            // Only auto-merge patch and minor updates
            const title = pr.data.title.toLowerCase();
            const isMinorUpdate = title.includes('bump') && (
              title.includes('patch') ||
              title.includes('minor') ||
              /\d+\.\d+\.\d+.*\d+\.\d+\.\d+/.test(title)
            );

            if (isMinorUpdate) {
              console.log('✅ Dependabot PR eligible for auto-merge');

              // Approve the PR
              await github.rest.pulls.createReview({
                owner,
                repo,
                pull_number: number,
                event: 'APPROVE',
                body: '✅ Auto-approved: Dependabot patch/minor version update'
              });

              // Enable auto-merge
              await github.rest.pulls.enableAutoMerge({
                owner,
                repo,
                pull_number: number,
                merge_method: 'squash'
              });

              console.log('✅ Auto-merge enabled for dependabot PR');

              // Add labels
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: ['dependencies', 'auto-merge']
              });

            } else {
              console.log('⚠️ Dependabot PR requires manual review (major version change)');
            }
              await github.rest.issues.addLabels({
                owner,
                repo,
                issue_number: number,
                labels: ['dependencies', 'auto-merge']
              });

            } else {
              console.log('⚠️ Dependabot PR requires manual review (major version change)');
            }

  # Wait for CI to complete before auto-merging
  wait-for-ci:
    runs-on: ubuntu-latest
    needs: [check-auto-mergeable]
    if: needs.check-auto-mergeable.result == 'success'

    steps:
      - name: Wait for CI completion
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.payload.pull_request;

            // Wait for CI workflows to complete
            const maxWaitTime = 20 * 60 * 1000; // 20 minutes
            const startTime = Date.now();

            while (Date.now() - startTime < maxWaitTime) {
              const pr = await github.rest.pulls.get({
                owner,
                repo,
                pull_number: number
              });

              const sha = pr.data.head.sha;

              // Get check runs
              const checkRuns = await github.rest.checks.listForRef({
                owner,
                repo,
                ref: sha
              });

              const relevantChecks = checkRuns.data.check_runs.filter(run =>
                run.name.includes('lint-and-test') ||
                run.name.includes('security-scan') ||
                run.name.includes('markdown-lint')
              );

              const allCompleted = relevantChecks.every(check => check.status === 'completed');
              const allSuccessful = relevantChecks.every(check =>
                check.status === 'completed' && check.conclusion === 'success'
              );

              if (allCompleted && allSuccessful) {
                console.log('✅ All CI checks completed successfully');
                return;
              } else if (allCompleted && !allSuccessful) {
                console.log('❌ Some CI checks failed');
                process.exit(1);
              }

              console.log('⏳ Waiting for CI checks to complete...');
              await new Promise(resolve => setTimeout(resolve, 30000)); // Wait 30 seconds
            }

            console.log('⏰ Timeout waiting for CI completion');
            process.exit(1);
