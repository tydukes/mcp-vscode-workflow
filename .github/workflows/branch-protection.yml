name: Branch Protection

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ main, develop ]

# Ensure all required checks pass before allowing merge
jobs:
  enforce-requirements:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check PR title format
        uses: actions/github-script@v7
        with:
          script: |
            const title = context.payload.pull_request.title;

            // Define allowed prefixes for conventional commits
            const allowedPrefixes = [
              'feat:', 'fix:', 'docs:', 'style:', 'refactor:',
              'test:', 'chore:', 'ci:', 'build:', 'perf:'
            ];

            const hasValidPrefix = allowedPrefixes.some(prefix =>
              title.toLowerCase().startsWith(prefix)
            );

            if (!hasValidPrefix) {
              console.log('‚ùå PR title does not follow conventional commit format');
              console.log(`Title: "${title}"`);
              console.log('Expected format: <type>: <description>');
              console.log('Allowed types: feat, fix, docs, style, refactor, test, chore, ci, build, perf');
              process.exit(1);
            }

            console.log('‚úÖ PR title follows conventional commit format');

      - name: Check for required labels
        uses: actions/github-script@v7
        with:
          script: |
            const labels = context.payload.pull_request.labels.map(label => label.name);

            // Skip label check for dependabot PRs
            if (context.payload.pull_request.user.login === 'dependabot[bot]') {
              console.log('ü§ñ Skipping label check for dependabot PR');
              return;
            }

            const requiredLabels = ['enhancement', 'bug', 'documentation', 'maintenance'];
            const hasRequiredLabel = requiredLabels.some(required =>
              labels.some(label => label.toLowerCase().includes(required))
            );

            if (!hasRequiredLabel && labels.length === 0) {
              console.log('‚ö†Ô∏è No labels found on PR');
              console.log('Consider adding one of: enhancement, bug, documentation, maintenance');
              // Don't fail for missing labels, just warn
            } else {
              console.log('‚úÖ PR has appropriate labels');
            }

  conflict-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check for merge conflicts
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.payload.pull_request;

            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });

            if (pr.data.mergeable === false) {
              console.log('‚ùå PR has merge conflicts');
              console.log('Please resolve conflicts before merging');
              process.exit(1);
            }

            if (pr.data.mergeable === null) {
              console.log('‚è≥ Merge conflict status is being determined...');
              console.log('GitHub is still checking for conflicts');
              // Don't fail immediately, GitHub might still be checking
            }

            console.log('‚úÖ No merge conflicts detected');

  size-check:
    runs-on: ubuntu-latest
    steps:
      - name: Check PR size
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.payload.pull_request;

            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });

            const additions = pr.data.additions;
            const deletions = pr.data.deletions;
            const changedFiles = pr.data.changed_files;

            console.log(`üìä PR Statistics:`);
            console.log(`  Additions: ${additions}`);
            console.log(`  Deletions: ${deletions}`);
            console.log(`  Changed files: ${changedFiles}`);

            // Warning thresholds
            const maxAdditions = 1000;
            const maxFiles = 50;

            if (additions > maxAdditions) {
              console.log(`‚ö†Ô∏è Large PR detected (${additions} additions)`);
              console.log('Consider breaking this into smaller PRs for easier review');
            }

            if (changedFiles > maxFiles) {
              console.log(`‚ö†Ô∏è Many files changed (${changedFiles} files)`);
              console.log('Consider breaking this into smaller PRs for easier review');
            }

            console.log('‚úÖ PR size check completed');

  # This job depends on CI workflow completion through GitHub's built-in status checks
  wait-for-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Wait for CI checks
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const { number } = context.payload.pull_request;

            // Get the latest commit SHA
            const pr = await github.rest.pulls.get({
              owner,
              repo,
              pull_number: number
            });

            const sha = pr.data.head.sha;
            console.log(`Checking CI status for commit: ${sha}`);

            // Wait for CI checks to complete with multiple attempts
            let maxAttempts = 10;
            let attempt = 1;

            while (attempt <= maxAttempts) {
              console.log(`Attempt ${attempt}/${maxAttempts}`);

              try {
                // Get all check runs for this commit
                const checkRuns = await github.rest.checks.listForRef({
                  owner,
                  repo,
                  ref: sha
                });

                console.log(`Found ${checkRuns.data.check_runs.length} total check runs`);

                // Filter for CI workflow checks
                const ciChecks = checkRuns.data.check_runs.filter(run =>
                  run.name === 'lint-and-test' ||
                  run.name === 'security-scan' ||
                  run.name === 'markdown-lint'
                );

                console.log(`Found ${ciChecks.length} CI checks`);

                if (ciChecks.length === 0) {
                  console.log('‚è≥ No CI checks found yet, waiting...');
                  if (attempt < maxAttempts) {
                    await new Promise(resolve => setTimeout(resolve, 30000));
                    attempt++;
                    continue;
                  } else {
                    console.log('‚ùå No CI checks found after maximum attempts');
                    process.exit(1);
                  }
                }

                // Check status of each CI check
                const pending = ciChecks.filter(check => check.status !== 'completed');
                const failed = ciChecks.filter(check =>
                  check.status === 'completed' && check.conclusion !== 'success'
                );

                if (failed.length > 0) {
                  console.log('‚ùå Some CI checks have failed:');
                  failed.forEach(check => {
                    console.log(`  - ${check.name}: ${check.conclusion}`);
                  });
                  process.exit(1);
                }

                if (pending.length > 0) {
                  console.log(`‚è≥ ${pending.length} CI checks still pending:`);
                  pending.forEach(check => {
                    console.log(`  - ${check.name}: ${check.status}`);
                  });

                  if (attempt < maxAttempts) {
                    console.log('Waiting 30 seconds before next check...');
                    await new Promise(resolve => setTimeout(resolve, 30000));
                    attempt++;
                    continue;
                  } else {
                    console.log('‚ùå CI checks did not complete within timeout');
                    process.exit(1);
                  }
                }

                // All checks completed successfully
                console.log('‚úÖ All CI checks have passed successfully');
                ciChecks.forEach(check => {
                  console.log(`  - ${check.name}: ${check.conclusion}`);
                });
                break;

              } catch (error) {
                console.error(`Error checking CI status: ${error.message}`);
                if (attempt < maxAttempts) {
                  console.log('Retrying in 10 seconds...');
                  await new Promise(resolve => setTimeout(resolve, 10000));
                  attempt++;
                } else {
                  console.error('‚ùå Failed to check CI status after all attempts');
                  process.exit(1);
                }
              }
            }

  # Final status check that depends on all other jobs
  final-status:
    runs-on: ubuntu-latest
    needs: [enforce-requirements, conflict-check, size-check, wait-for-ci]
    if: always()
    steps:
      - name: Check all requirements
        uses: actions/github-script@v7
        with:
          script: |
            const jobs = [
              { name: 'enforce-requirements', result: '${{ needs.enforce-requirements.result }}' },
              { name: 'conflict-check', result: '${{ needs.conflict-check.result }}' },
              { name: 'size-check', result: '${{ needs.size-check.result }}' },
              { name: 'wait-for-ci', result: '${{ needs.wait-for-ci.result }}' }
            ];

            console.log('üìã Branch Protection Status:');
            let allPassed = true;

            jobs.forEach(job => {
              const status = job.result === 'success' ? '‚úÖ' : '‚ùå';
              console.log(`  ${status} ${job.name}: ${job.result}`);
              if (job.result !== 'success') {
                allPassed = false;
              }
            });

            if (allPassed) {
              console.log('\nüéâ All branch protection requirements satisfied!');
              console.log('PR is ready for merge');
            } else {
              console.log('\n‚ùå Some branch protection requirements failed');
              console.log('Please address the issues before merging');
              process.exit(1);
            }
