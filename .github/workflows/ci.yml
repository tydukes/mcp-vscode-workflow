name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt', '**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Cache uv dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Cache system packages
      uses: actions/cache@v4
      with:
        path: /var/cache/apt
        key: ${{ runner.os }}-apt-${{ hashFiles('.github/workflows/ci.yml') }}
        restore-keys: |
          ${{ runner.os }}-apt-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq shellcheck

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install uv
        # Create virtual environment for uv to use
        python -m venv .venv
        source .venv/bin/activate
        # Install dev dependencies using uv for better performance
        if [ -f "pyproject.toml" ]; then
          uv pip install -e ".[dev]" || uv pip install -e . || true
        elif [ -f "requirements-dev.txt" ]; then
          uv pip install -r requirements-dev.txt
        elif [ -f "requirements.txt" ]; then
          uv pip install -r requirements.txt
          uv pip install pytest pytest-cov
        else
          uv pip install pytest pytest-cov
        fi

    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh

    - name: Run tool validation
      run: |
        ./scripts/check-tools.sh --profile bash

    - name: Run shellcheck on shell scripts
      run: |
        find . -name "*.sh" -type f -not -path "./.venv/*" -not -path "./venv/*" -not -path "./virtualenv/*" -exec shellcheck {} +

    - name: Validate JSON files
      run: |
        find . -name "*.json" -type f -not -path "./.venv/*" -not -path "./venv/*" -not -path "./virtualenv/*" -exec jq empty {} \;

    - name: Run Python linting (if Python files exist)
      run: |
        if find . -name "*.py" -type f -not -path "./.venv/*" -not -path "./venv/*" -not -path "./virtualenv/*" | head -1 | grep -q .; then
          source .venv/bin/activate
          echo "Running flake8..."
          flake8 . --config=.flake8
          echo "Running black check..."
          black --check --diff .
          echo "Running isort check..."
          isort --check-only --diff .
        else
          echo "No Python files found, skipping Python linting"
        fi

    - name: Run Python tests (if present)
      run: |
        if [ -d "tests" ]; then
          source .venv/bin/activate
          if command -v uv >/dev/null 2>&1; then
            uv run pytest tests/ --cov=tests --cov-report=xml --cov-report=term-missing || pytest tests/ --cov=tests --cov-report=xml --cov-report=term-missing
          else
            pytest tests/ --cov=tests --cov-report=xml --cov-report=term-missing
          fi
        else
          echo "No tests directory found, skipping pytest"
        fi

    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: success()
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  security-scan:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Run security scan on shell scripts
      run: |
        # Install bandit for Python security scanning if Python files exist
        if find . -name "*.py" -not -path "./.venv/*" -not -path "./venv/*" -not -path "./virtualenv/*" | head -1 | grep -q .; then
          pip install bandit
          # Use project's bandit configuration from pyproject.toml
          bandit -c pyproject.toml -r . -f json -o bandit-report.json || true
        fi

        # Check for common security issues in shell scripts
        find . -name "*.sh" -type f -not -path "./.venv/*" -not -path "./venv/*" -not -path "./virtualenv/*" -exec grep -l "eval\|exec\|\$(\|\`" {} \; | while read -r file; do
          echo "Warning: Potentially unsafe shell constructs found in $file"
        done

    - name: Check for secrets
      uses: trufflesecurity/trufflehog@main
      if: github.event_name == 'pull_request' || github.event.before != '0000000000000000000000000000000000000000'
      with:
        path: ./
        base: ${{ github.event_name == 'pull_request' && github.event.pull_request.base.sha || github.event.before }}
        head: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.sha }}
        extra_args: --debug --only-verified

  markdown-lint:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Install markdownlint
      run: npm install -g markdownlint-cli

    - name: Lint Markdown files
      run: |
        markdownlint . --ignore node_modules --ignore .git || true

  branch-protection:
    runs-on: ubuntu-latest
    needs: [lint-and-test, security-scan, markdown-lint]
    if: github.event_name == 'pull_request'

    steps:
    - name: Check all jobs passed
      run: |
        echo "All CI checks passed successfully"

    - name: Block merge on failure
      if: failure()
      run: |
        echo "CI checks failed - blocking merge"
        exit 1
