# Pre-commit configuration for MCP VS Code Workflow
# See https://pre-commit.com for more information
# 
# Installation:
#   pip install pre-commit
#   pre-commit install
#
# Run manually:
#   pre-commit run --all-files

repos:
  # Built-in hooks
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.5.0
    hooks:
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: check-yaml
        args: [--unsafe]  # Allow custom YAML tags
      - id: check-json
      - id: check-merge-conflict
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-case-conflict
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: mixed-line-ending
        args: [--fix=lf]

  # Shell script linting
  - repo: https://github.com/shellcheck-py/shellcheck-py
    rev: v0.9.0.6
    hooks:
      - id: shellcheck
        args: [--severity=warning]
        files: \.sh$

  # JSON validation and formatting
  - repo: https://github.com/pre-commit/mirrors-jq
    rev: v1.7.1
    hooks:
      - id: jq
        name: Validate JSON files
        files: \.json$
        args: [--tab, .]

  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.37.0
    hooks:
      - id: markdownlint
        args: [--fix]
        files: \.md$

  # Python linting and formatting (if Python files exist)
  - repo: https://github.com/psf/black
    rev: 23.12.1
    hooks:
      - id: black
        language_version: python3

  - repo: https://github.com/pycqa/isort
    rev: 5.13.2
    hooks:
      - id: isort
        args: [--profile, black]

  - repo: https://github.com/pycqa/flake8
    rev: 7.0.0
    hooks:
      - id: flake8
        args: [--max-line-length=88, --extend-ignore=E203,W503]

  - repo: https://github.com/PyCQA/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        args: [-r, ., -f, json, -o, bandit-report.json]
        exclude: ^tests/

  # Custom hooks for project-specific validation
  - repo: local
    hooks:
      - id: check-tools-validation
        name: Run check-tools.sh validation
        entry: ./scripts/check-tools.sh
        language: script
        args: [--profile, bash]
        pass_filenames: false
        always_run: true

      - id: mcp-config-validation
        name: Validate MCP configurations
        entry: bash
        language: script
        args:
          - -c
          - |
            for config in .mcp/config-*.json; do
              if [ -f "$config" ]; then
                echo "Validating $config"
                jq empty "$config" || exit 1
              fi
            done
            if [ -f ".mcp/roles.json" ]; then
              echo "Validating roles.json"
              jq empty ".mcp/roles.json" || exit 1
            fi
        files: '^\.mcp/.*\.json$'
        pass_filenames: false

      - id: profile-config-validation
        name: Validate VS Code profile configurations
        entry: bash
        language: script
        args:
          - -c
          - |
            for profile in .vscode/profiles/*.json; do
              if [ -f "$profile" ]; then
                echo "Validating $profile"
                jq empty "$profile" || exit 1
              fi
            done
        files: '^\.vscode/profiles/.*\.json$'
        pass_filenames: false

      - id: script-permissions
        name: Ensure scripts are executable
        entry: bash
        language: script
        args:
          - -c
          - |
            for script in scripts/*.sh; do
              if [ -f "$script" ] && [ ! -x "$script" ]; then
                echo "Making $script executable"
                chmod +x "$script"
              fi
            done
        files: '^scripts/.*\.sh$'
        pass_filenames: false

      - id: documentation-links
        name: Check documentation internal links
        entry: bash
        language: script
        args:
          - -c
          - |
            # Check for broken internal links in markdown files
            for md_file in docs/*.md README.md; do
              if [ -f "$md_file" ]; then
                echo "Checking links in $md_file"
                # Extract markdown links and check if referenced files exist
                grep -oE '\[.*\]\([^)]*\.md[^)]*\)' "$md_file" | sed 's/.*(\([^)]*\)).*/\1/' | while read -r link; do
                  # Remove anchors and clean path
                  clean_link=$(echo "$link" | sed 's/#.*//' | sed 's|^./||' | sed 's|^/||')
                  if [ -n "$clean_link" ] && [ ! -f "$clean_link" ] && [ ! -f "docs/$clean_link" ]; then
                    echo "Warning: Broken link found in $md_file: $clean_link"
                  fi
                done
              fi
            done
        files: '^(docs/.*\.md|README\.md)$'
        pass_filenames: false

  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: \.git/.*|\.secrets\.baseline|package-lock\.json

# Configuration for specific tools
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false
